/**
 * ELYSIUM Guild Bidding System - Google Sheets Integration
 * 
 * SHEETS:
 * - BiddingPoints: Live bidding points
 * - TestBiddingPoints: Dry run test data
 * 
 * ENDPOINTS:
 * - getBiddingPoints: Fetch all member points
 * - submitBiddingResults: Record auction results
 */

// Configuration
const CONFIG1 = {
  SHEET_ID: '1dGLGjmRhvG0io1Yta5ikfN-b_U-SSJJfWIHznK18qYQ',
  BIDDING_SHEET: 'BiddingPoints',
  TEST_SHEET: 'TestBiddingPoints',
  TIMEZONE: 'Asia/Manila'
};

/**
 * Main webhook handler
 */
function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents || '{}');
    const action = data.action || 'unknown';
    
    Logger.log(`üî• Bidding action: ${action}`);
    Logger.log(`üì¶ Payload: ${JSON.stringify(data)}`);
    
    if (action === 'getBiddingPoints') {
      return handleGetBiddingPoints(data);
    }
    
    if (action === 'submitBiddingResults') {
      return handleSubmitBiddingResults(data);
    }
    
    Logger.log(`‚ùå Unknown action: ${action}`);
    return createResponse('error', 'Unknown action: ' + action);
    
  } catch (err) {
    Logger.log('‚ùå Error in doPost: ' + err.toString());
    Logger.log('‚ùå Stack trace: ' + err.stack);
    return createResponse('error', err.toString());
  }
}

/**
 * Get bidding points for all members
 */
function handleGetBiddingPoints(data) {
  const isDryRun = data.dryRun || false;
  const sheetName = isDryRun ? CONFIG1.TEST_SHEET : CONFIG1.BIDDING_SHEET;
  
  Logger.log(`üìä Fetching points from ${sheetName} (dryRun: ${isDryRun})`);
  
  try {
    const ss = SpreadsheetApp.openById(CONFIG1.SHEET_ID);
    let sheet = ss.getSheetByName(sheetName);
    
    // Create test sheet if doesn't exist (for dry run)
    if (!sheet && isDryRun) {
      sheet = createTestSheet(ss);
    }
    
    if (!sheet) {
      return createResponse('error', `Sheet not found: ${sheetName}`);
    }
    
    const lastRow = sheet.getLastRow();
    
    if (lastRow < 2) {
      return createResponse('ok', 'No members found', {points: {}});
    }
    
    // Fetch columns A (Member) and B (Points Left)
    const data = sheet.getRange(2, 1, lastRow - 1, 2).getValues();
    
    const points = {};
    data.forEach(row => {
      const member = (row[0] || '').toString().trim();
      const pointsLeft = Number(row[1]) || 0;
      
      if (member) {
        points[member] = pointsLeft;
      }
    });
    
    Logger.log(`‚úÖ Fetched points for ${Object.keys(points).length} members`);
    
    return createResponse('ok', 'Points fetched', {points: points});
    
  } catch (err) {
    Logger.log('‚ùå Error fetching points: ' + err);
    return createResponse('error', err.toString());
  }
}

/**
 * Submit auction results to sheet
 */
function handleSubmitBiddingResults(data) {
  const results = data.results || []; // [{member, totalSpent}]
  const date = data.date || ''; // MM/DD/YYYY
  const isDryRun = data.dryRun || false;
  const sheetName = isDryRun ? CONFIG1.TEST_SHEET : CONFIG1.BIDDING_SHEET;
  
  Logger.log(`üìä Submitting results to ${sheetName} (dryRun: ${isDryRun})`);
  Logger.log(`üìÖ Date: ${date}`);
  Logger.log(`üèÜ Results: ${JSON.stringify(results)}`);
  
  if (!date || results.length === 0) {
    return createResponse('error', 'Missing date or results');
  }
  
  try {
    const ss = SpreadsheetApp.openById(CONFIG1.SHEET_ID);
    let sheet = ss.getSheetByName(sheetName);
    
    // Create test sheet if doesn't exist (for dry run)
    if (!sheet && isDryRun) {
      sheet = createTestSheet(ss);
    }
    
    if (!sheet) {
      return createResponse('error', `Sheet not found: ${sheetName}`);
    }
    
    const lastRow = sheet.getLastRow();
    const lastCol = sheet.getLastColumn();
    
    // Find or create column for this date
    let dateColumn = -1;
    
    // Check existing date columns (D onwards)
    if (lastCol >= 4) {
      const headers = sheet.getRange(1, 4, 1, lastCol - 3).getValues()[0];
      
      for (let i = 0; i < headers.length; i++) {
        if (headers[i].toString().trim() === date) {
          dateColumn = i + 4; // Column D is index 4
          Logger.log(`üìç Found existing date column at ${dateColumn}`);
          break;
        }
      }
    }
    
    // Create new column if not found
    if (dateColumn === -1) {
      dateColumn = lastCol + 1;
      sheet.getRange(1, dateColumn).setValue(date)
        .setFontWeight('bold')
        .setBackground('#4A90E2')
        .setFontColor('#FFFFFF')
        .setHorizontalAlignment('center');
      
      Logger.log(`‚ûï Created new date column at ${dateColumn}`);
    }
    
    // Get all member names from column A
    const memberNames = sheet.getRange(2, 1, lastRow - 1, 1).getValues().flat();
    
    // Prepare update data
    const updates = [];
    
    results.forEach(result => {
      const member = result.member.trim();
      const totalSpent = result.totalSpent || 0;
      
      // Find member's row (case-insensitive)
      const memberLower = member.toLowerCase();
      let rowIndex = -1;
      
      for (let i = 0; i < memberNames.length; i++) {
        if (memberNames[i].toString().trim().toLowerCase() === memberLower) {
          rowIndex = i + 2; // +2 because row 1 is header, array is 0-indexed
          break;
        }
      }
      
      if (rowIndex !== -1) {
        updates.push({row: rowIndex, amount: totalSpent});
        Logger.log(`üìù Update: ${member} (row ${rowIndex}) -> ${totalSpent} points`);
      } else {
        Logger.log(`‚ö†Ô∏è Member not found: ${member}`);
      }
    });
    
    // Batch update
    if (updates.length > 0) {
      updates.forEach(update => {
        sheet.getRange(update.row, dateColumn).setValue(update.amount);
      });
      
      Logger.log(`‚úÖ Updated ${updates.length} rows in column ${dateColumn}`);
    }
    
    // Update Column B (Points Left) by re-triggering the existing App Script function
    // This ensures Points Left = Total - Consumed is calculated correctly
    if (!isDryRun) {
      updateBiddingPoints(); // Call the existing function from your Bidding.txt
    }
    
    return createResponse('ok', `Results submitted: ${updates.length} members updated`, {
      dateColumn: dateColumn,
      membersUpdated: updates.length,
      date: date
    });
    
  } catch (err) {
    Logger.log('‚ùå Error submitting results: ' + err);
    return createResponse('error', err.toString());
  }
}

/**
 * Create test sheet for dry run mode
 */
function createTestSheet(spreadsheet) {
  Logger.log('üß™ Creating test bidding sheet...');
  
  const testSheet = spreadsheet.insertSheet(CONFIG1.TEST_SHEET);
  
  // Set up headers
  const headers = [['Member', 'Bidding Points Left', 'Consumed']];
  const headerRange = testSheet.getRange(1, 1, 1, 3);
  headerRange.setValues(headers)
    .setFontWeight('bold')
    .setBackground('#4A90E2')
    .setFontColor('#FFFFFF')
    .setHorizontalAlignment('center');
  
  // Add test data (copy from live sheet if exists)
  const liveSheet = spreadsheet.getSheetByName(CONFIG1.BIDDING_SHEET);
  
  if (liveSheet) {
    const lastRow = liveSheet.getLastRow();
    if (lastRow > 1) {
      const liveData = liveSheet.getRange(2, 1, lastRow - 1, 3).getValues();
      testSheet.getRange(2, 1, liveData.length, 3).setValues(liveData);
      Logger.log(`üìã Copied ${liveData.length} members from live sheet`);
    }
  } else {
    // Add sample test data
    const testData = [
      ['TestPlayer1', 1000, 0],
      ['TestPlayer2', 1000, 0],
      ['TestPlayer3', 1000, 0],
      ['TestPlayer4', 1000, 0],
      ['TestPlayer5', 1000, 0]
    ];
    
    testSheet.getRange(2, 1, testData.length, 3).setValues(testData);
    Logger.log('üìã Added sample test data');
  }
  
  // Set column widths
  testSheet.setColumnWidth(1, 150);
  testSheet.setColumnWidth(2, 150);
  testSheet.setColumnWidth(3, 120);
  
  // Add warning message
  testSheet.getRange('A1').setNote('üß™ TEST SHEET - Dry run mode only. No real points affected.');
  
  Logger.log('‚úÖ Test sheet created');
  return testSheet;
}

/**
 * Create JSON response
 */
function createResponse(status, message, data) {
  const response = {
    status: status,
    message: message,
    timestamp: new Date().toISOString()
  };
  
  if (data) {
    Object.assign(response, data);
  }
  
  return ContentService
    .createTextOutput(JSON.stringify(response))
    .setMimeType(ContentService.MimeType.JSON);
}

/**
 * Update bidding points (called after auction results are submitted)
 * This is the same function from Bidding.txt but integrated here
 */
function updateBiddingPoints() {
  const ss = SpreadsheetApp.openById(CONFIG1.SHEET_ID);
  const bpSheet = ss.getSheetByName(CONFIG1.BIDDING_SHEET);
  
  if (!bpSheet) {
    Logger.log('‚ö†Ô∏è BiddingPoints sheet not found');
    return;
  }

  // Get existing members and consumed points
  const lastRow = bpSheet.getLastRow();
  const lastCol = bpSheet.getLastColumn();
  
  if (lastRow < 2) {
    Logger.log('‚ÑπÔ∏è No members in BiddingPoints sheet');
    return;
  }
  
  const existingData = bpSheet.getRange(2, 1, lastRow - 1, 3).getValues(); // A=Member, B=Points Left, C=Consumed
  let memberMap = {}; // member => { row, consumed }
  
  existingData.forEach((row, i) => {
    const member = (row[0] || '').toString().trim();
    if (member) {
      memberMap[member] = {
        row: i + 2, // actual row in sheet
        consumed: Number(row[2]) || 0
      };
    }
  });

  const sheets = ss.getSheets();
  let totals = {}; // member => total weekly points

  // Loop through all weekly sheets (from attendance system)
  sheets.forEach(sheet => {
    if (sheet.getName().startsWith('ELYSIUM_WEEK_')) {
      const data = sheet.getRange('A2:D').getValues(); // Column A = Member, D = weekly points
      data.forEach(row => {
        const member = (row[0] || '').toString().trim();
        const points = Number(row[3]) || 0;
        if (member) {
          totals[member] = (totals[member] || 0) + points;
        }
      });
    }
  });

  // Update Column B (Points Left) = Total Weekly Points - Consumed
  Object.keys(memberMap).forEach(member => {
    const weeklyTotal = totals[member] || 0;
    const consumed = memberMap[member].consumed || 0;
    const pointsLeft = weeklyTotal - consumed;
    
    bpSheet.getRange(memberMap[member].row, 2).setValue(pointsLeft);
  });
  
  Logger.log(`‚úÖ Updated bidding points for ${Object.keys(memberMap).length} members`);
}

// ==========================================
// TEST FUNCTIONS
// ==========================================

/**
 * Test get bidding points
 */
function testGetBiddingPoints() {
  Logger.log('=== TESTING GET BIDDING POINTS ===');
  
  const testPayload = {
    postData: {
      contents: JSON.stringify({
        action: 'getBiddingPoints',
        dryRun: false
      })
    }
  };
  
  const result = doPost(testPayload);
  Logger.log('Result: ' + result.getContent());
}

/**
 * Test submit auction results
 */
function testSubmitBiddingResults() {
  Logger.log('=== TESTING SUBMIT BIDDING RESULTS ===');
  
  const testPayload = {
    postData: {
      contents: JSON.stringify({
        action: 'submitBiddingResults',
        date: '10/24/2025',
        dryRun: false,
        results: [
          {member: 'goblok', totalSpent: 150},
          {member: 'hesucrypto', totalSpent: 200}
        ]
      })
    }
  };
  
  const result = doPost(testPayload);
  Logger.log('Result: ' + result.getContent());
}

/**
 * Test dry run mode
 */
function testDryRun() {
  Logger.log('=== TESTING DRY RUN MODE ===');
  
  const testPayload = {
    postData: {
      contents: JSON.stringify({
        action: 'getBiddingPoints',
        dryRun: true
      })
    }
  };
  
  const result = doPost(testPayload);
  Logger.log('Result: ' + result.getContent());
}